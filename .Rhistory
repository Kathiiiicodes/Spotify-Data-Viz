font-size: 15px;
}
#text3{
color: #C0C0C0;
font-size: 15px;
}
#sidebarmenu:hover{
background-color: #1DB954;
color: #151515;
}"
)
),
tags$head(
tags$style(HTML("
.selectize-input {
font-size: 12pt;
padding-top: 10px;
title: white !important;
}
.selectize-dropdown-content .active {
background: #1ED760 !important;
color: white !important;
}
.item {
background: #1ED760 !important;
color: black !important;
border-radius: 3px;
padding: 2px;
}
.multi {
width: 450px;
}
.selectize-control .option {
background-color: #1ED760;
text-decoration: none
}
.menu {
background-color: black !important;
}
.dropdown-menu {
background-color: black !important;
border-color: black !important;
}
.full {
background-color: black !important;
}
"
)
)
)
)
library(dplyr)
library(ggplot2)
library(shiny)
library(eurostat)
library(leaflet)
theme_spoti <- shinyDashboardThemeDIY(
appFontFamily = "FuturaMedium"
,appFontColor = "#C0C0C0"
,primaryFontColor = "#434C5E"
,infoFontColor = "#434C5E"
,successFontColor = "#434C5E"
,warningFontColor = "#434C5E"
,dangerFontColor = "#434C5E"
,bodyBackColor = "#232323"
,logoBackColor = "#151515"
,headerButtonBackColor = "#151515"
,headerButtonIconColor = "#D8DEE9"
,headerButtonBackColorHover = "#1DB954"
,headerButtonIconColorHover = "#151515"
,headerBackColor = "#151515"
,headerBoxShadowColor = ""
,headerBoxShadowSize = "0px 0px 0px"
,sidebarBackColor = "#151515"
,sidebarPadding = 0
,sidebarMenuBackColor = "transparent"
,sidebarMenuPadding = 5
,sidebarMenuBorderRadius = 5
,sidebarShadowRadius = ""
,sidebarShadowColor = "0px 0px 0px"
,sidebarUserTextColor = "#D8DEE9"
,sidebarSearchBackColor = "#4C566A"
,sidebarSearchIconColor = "#151515"
,sidebarSearchBorderColor = "#4C566A"
,sidebarTabTextColor = "#ECEFF4"
,sidebarTabTextSize = 14
,sidebarTabBorderStyle = "none"
,sidebarTabBorderColor = "#000000"
,sidebarTabBorderWidth = 0
,sidebarTabBackColorSelected = "#1DB954"
,sidebarTabTextColorSelected = "#000000"
,sidebarTabRadiusSelected = "20px"
,sidebarTabBackColorHover = "#1DB954"
,sidebarTabTextColorHover = "#000000"
,sidebarTabBorderStyleHover = "none"
,sidebarTabBorderColorHover = "none"
,sidebarTabBorderWidthHover = 0
,sidebarTabRadiusHover = "20px"
,boxBackColor = "#232323"
,boxBorderRadius = 5
,boxShadowSize = "0px 0px 0px"
,boxShadowColor = ""
,boxTitleSize = 18
,boxDefaultColor = "#232323"
,boxPrimaryColor = "#232323"
,boxInfoColor = "#232323"
,boxSuccessColor = "#232323"
,boxWarningColor = "#232323"
,boxDangerColor = "#232323"
,tabBoxTabColor = "#151515"
,tabBoxTabTextSize = 16
,tabBoxTabTextColor = "#151515"
,tabBoxTabTextColorSelected = "#151515"
,tabBoxBackColor = "#BF616A"
,tabBoxHighlightColor = "#4C566A"
,tabBoxBorderRadius = 5
,buttonBackColor = "#151515"
,buttonTextColor = "#2E3440"
,buttonBorderColor = "#2E3440"
,buttonBorderRadius = 5
,buttonBackColorHover = "#151515"
,buttonTextColorHover = "#232323"
,buttonBorderColorHover = "#2E3440"
,textboxBackColor = "#151515"
,textboxBorderColor = "#1ED760"
,textboxBorderRadius = 5
,textboxBackColorSelect = "#151515"
,textboxBorderColorSelect = "#1ED760"
,tableBackColor = "#151515"
,tableBorderColor = "#2E3440"
,tableBorderTopSize = 1
,tableBorderRowSize = 1
)
Capstone
shiny::runApp('C:/Users/kathi/Downloads/DV-Spotify/Capstone-DV-Spotify-main')
artist_name <- "Atif Aslam"
artist_info <- search_spotify(artist_name, type="artist",limit=1)
artist_name <- "Atif Aslam"
artist_info <- search_spotify(artist_name, type="artist",limit=1)
Sys.setenv(SPOTIFY_CLIENT_ID = "0944bf61019d4d18acc61fb1a2bd3b7f")
Sys.setenv(SPOTIFY_CLIENT_SECRET = "fab71763c6d74e409658e02f2a7c517c")
library(spotifyr)
library(lubridate)
library(tidyverse)
library(plotly)
artist_name <- "Atif Aslam"
artist_info <- search_spotify(artist_name, type="artist",limit=1)
artist_id <- artist_info$id
artist_albums <- get_artist_albums(artist_id)
average_features <- data.frame(
Album = character(),
Energy = double(),
stringsAsFactors = FALSE
)
for (album_id in artist_albums$id) {
album_tracks <- get_album_tracks(album_id)
track_ids <- album_tracks$id
audio_features <- get_track_audio_features(track_ids)
avg_energy <- mean(audio_features$energy)
album_name <- artist_albums$name[artist_albums$id == album_id]
average_features <- rbind(average_features, data.frame(Album = album_name, Energy = avg_energy))
}
plot <- plot_ly(average_features, x = ~Album, y = ~Energy, type = "bar", text = ~Energy, textposition = "outside", marker = list(color = "blue"))
plot <- plot %>% layout(
title = paste("Average Energy for Albums by", artist_name),
xaxis = list(title = "Album"),
yaxis = list(title = "Average Energy")
)
plot
Sys.setenv(SPOTIFY_CLIENT_ID = "0944bf61019d4d18acc61fb1a2bd3b7f")
Sys.setenv(SPOTIFY_CLIENT_SECRET = "fab71763c6d74e409658e02f2a7c517c")
library(spotifyr)
library(lubridate)
library(tidyverse)
library(plotly)
artist_name <- "Atif Aslam"
artist_info <- search_spotify(artist_name, type = "artist", limit = 1)
artist_id <- artist_info$id
artist_albums <- get_artist_albums(artist_id)
audio_features <- c("energy", "loudness", "valence", "danceability", "tempo")  # Add more features as needed
feature_plots <- list()
for (feature in audio_features) {
feature_data <- data.frame(
Album = character(),
Value = double(),
stringsAsFactors = FALSE
)
for (album_id in artist_albums$id) {
album_tracks <- get_album_tracks(album_id)
track_ids <- album_tracks$id
audio_features_data <- get_track_audio_features(track_ids)
avg_value <- mean(audio_features_data[[feature]])
album_name <- artist_albums$name[artist_albums$id == album_id]
feature_data <- rbind(feature_data, data.frame(Album = album_name, Value = avg_value))
}
feature_plot <- plot_ly(feature_data, x = ~Album, y = ~Value, type = "bar", text = ~Value, textposition = "outside", marker = list(color = "blue"))
feature_plot <- feature_plot %>% layout(
title = paste("Average", str_to_title(feature), "for Albums by", artist_name),
xaxis = list(title = "Album"),
yaxis = list(title = paste("Average", str_to_title(feature)))
)
feature_plots[[feature]] <- feature_plot
}
# Create dropdown menu
dropdown_menu <- list(
showactive = TRUE,
x = -0.1,
xanchor = 'left',
y = 1.1,
yanchor = 'top',
buttons = list()
)
for (feature in audio_features) {
button <- list(
method = "relayout",
label = str_to_title(feature),
args = list("xaxis.title", paste("Average", str_to_title(feature)))
)
dropdown_menu$buttons <- c(dropdown_menu$buttons, list(button))
}
# Create layout with dropdown menu
layout <- list(
title = paste("Average Energy for Albums by", artist_name),
xaxis = list(title = "Album"),
yaxis = list(title = "Average Energy"),
updatemenus = list(dropdown = dropdown_menu)
)
# Display the initial plot
feature_plots[["energy"]] %>% layout(layout)
shiny::runApp('C:/Users/kathi/Downloads/DV-Spotify/DV-Spotify')
runApp('C:/Users/kathi/Downloads/DV-Spotify/DV-Spotify')
runApp('C:/Users/kathi/Downloads/DV-Spotify/DV-Spotify')
runApp('C:/Users/kathi/Downloads/DV-Spotify/DV-Spotify')
runApp('C:/Users/kathi/Downloads/DV-Spotify/DV-Spotify')
runApp('C:/Users/kathi/Downloads/DV-Spotify/DV-Spotify')
cat("Request URL:", get_artist_albums_url(artist_name), "\n")
cat("Request URL:", get_artist_albums_url(artist_name), "\n")
runApp('C:/Users/kathi/Downloads/DV-Spotify/DV-Spotify')
runApp('C:/Users/kathi/Downloads/DV-Spotify/DV-Spotify')
runApp('C:/Users/kathi/Downloads/DV-Spotify/DV-Spotify')
runApp('C:/Users/kathi/Downloads/DV-Spotify/DV-Spotify')
runApp('C:/Users/kathi/Downloads/DV-Spotify/DV-Spotify')
shiny::runApp('C:/Users/kathi/Downloads/DV-Spotify/DV-Spotify')
shiny::runApp('C:/Users/kathi/Downloads/DV-Spotify/DV-Spotify')
runApp('C:/Users/kathi/Downloads/DV-Spotify/DV-Spotify')
runApp('C:/Users/kathi/Downloads/DV-Spotify/DV-Spotify')
library(shiny)
library(shinydashboard)
library(ggplot2)
library(dplyr)
# Load mtcars dataset
data(mtcars)
# Define UI
ui <- dashboardPage(
dashboardHeader(title = "MT Cars Dashboard"),
dashboardSidebar(
sidebarMenu(
menuItem("Page 1", tabName = "page1", icon = icon("dashboard")),
menuItem("Page 2", tabName = "page2", icon = icon("th")),
menuItem("Page 3", tabName = "page3", icon = icon("sliders-h")),
menuItem("Page 4", tabName = "page4", icon = icon("filter")),
menuItem("Page 5", tabName = "page5", icon = icon("paint-brush"))
)
),
dashboardBody(
tabItems(
# Page 1
tabItem(tabName = "page1",
fluidRow(
box(plotOutput("plot1"), width = 6),
box(plotOutput("plot2"), width = 6)
)
),
# Page 2
tabItem(tabName = "page2",
tabBox(
tabPanel("Tab 1", plotOutput("plot3")),
tabPanel("Tab 2", plotOutput("plot4"))
)
),
# Page 3
tabItem(tabName = "page3",
fluidRow(
radioButtons("radio", "Select Gear:", choices = unique(mtcars$gear)),
plotOutput("plot5")
)
),
# Page 4
tabItem(tabName = "page4",
fluidRow(
selectInput("carb", "Select Carb:", choices = unique(mtcars$carb)),
plotOutput("plot6")
)
),
# Page 5
tabItem(tabName = "page5",
fluidRow(
sliderInput("mpg_slider", "Select MPG Range:", min = min(mtcars$mpg), max = max(mtcars$mpg), value = c(min(mtcars$mpg), max(mtcars$mpg)), step = 1),
plotOutput("plot7", height = "300px"),
pickerInput("color_picker", "Select Color:", choices = unique(mtcars$cyl), options = list('live-search' = TRUE), multiple = TRUE)
)
)
)
)
)
install.packages('dplyr')
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
library(shiny)
library(shinydashboard)
library(ggplot2)
library(dplyr)
# Load mtcars dataset
data(mtcars)
# Define UI
ui <- dashboardPage(
dashboardHeader(title = "MT Cars Dashboard"),
dashboardSidebar(
sidebarMenu(
menuItem("Page 1", tabName = "page1", icon = icon("dashboard")),
menuItem("Page 2", tabName = "page2", icon = icon("th")),
menuItem("Page 3", tabName = "page3", icon = icon("sliders-h")),
menuItem("Page 4", tabName = "page4", icon = icon("filter")),
menuItem("Page 5", tabName = "page5", icon = icon("paint-brush"))
)
),
dashboardBody(
tabItems(
# Page 1
tabItem(tabName = "page1",
fluidRow(
box(plotOutput("plot1"), width = 6),
box(plotOutput("plot2"), width = 6)
)
),
# Page 2
tabItem(tabName = "page2",
tabBox(
tabPanel("Tab 1", plotOutput("plot3")),
tabPanel("Tab 2", plotOutput("plot4"))
)
),
# Page 3
tabItem(tabName = "page3",
fluidRow(
radioButtons("radio", "Select Gear:", choices = unique(mtcars$gear)),
plotOutput("plot5")
)
),
# Page 4
tabItem(tabName = "page4",
fluidRow(
selectInput("carb", "Select Carb:", choices = unique(mtcars$carb)),
plotOutput("plot6")
)
),
# Page 5
tabItem(tabName = "page5",
fluidRow(
sliderInput("mpg_slider", "Select MPG Range:", min = min(mtcars$mpg), max = max(mtcars$mpg), value = c(min(mtcars$mpg), max(mtcars$mpg)), step = 1),
plotOutput("plot7", height = "300px"),
pickerInput("color_picker", "Select Color:", choices = unique(mtcars$cyl), options = list('live-search' = TRUE), multiple = TRUE)
)
)
)
)
)
library(shiny)
library(shinydashboard)
library(ggplot2)
library(dplyr)
# Load mtcars dataset
data(mtcars)
# Define UI
ui <- dashboardPage(
dashboardHeader(title = "MT Cars Dashboard"),
dashboardSidebar(
sidebarMenu(
menuItem("Page 1", tabName = "page1", icon = icon("dashboard")),
menuItem("Page 2", tabName = "page2", icon = icon("th")),
menuItem("Page 3", tabName = "page3", icon = icon("sliders-h")),
menuItem("Page 4", tabName = "page4", icon = icon("filter")),
menuItem("Page 5", tabName = "page5", icon = icon("paint-brush"))
)
),
dashboardBody(
tabItems(
# Page 1
tabItem(tabName = "page1",
fluidRow(
box(plotOutput("plot1"), width = 6),
box(plotOutput("plot2"), width = 6)
)
),
# Page 2
tabItem(tabName = "page2",
tabBox(
tabPanel("Tab 1", plotOutput("plot3")),
tabPanel("Tab 2", plotOutput("plot4"))
)
),
# Page 3
tabItem(tabName = "page3",
fluidRow(
radioButtons("radio", "Select Gear:", choices = unique(mtcars$gear)),
plotOutput("plot5")
)
),
# Page 4
tabItem(tabName = "page4",
fluidRow(
selectInput("carb", "Select Carb:", choices = unique(mtcars$carb)),
plotOutput("plot6")
)
),
# Page 5
)
)
)
library(shiny)
library(shinydashboard)
library(ggplot2)
library(dplyr)
# Load mtcars dataset
data(mtcars)
# Define UI
ui <- dashboardPage(
dashboardHeader(title = "MT Cars Dashboard"),
dashboardSidebar(
sidebarMenu(
menuItem("Page 1", tabName = "page1", icon = icon("dashboard")),
menuItem("Page 2", tabName = "page2", icon = icon("th")),
menuItem("Page 3", tabName = "page3", icon = icon("sliders-h")),
menuItem("Page 4", tabName = "page4", icon = icon("filter")),
menuItem("Page 5", tabName = "page5", icon = icon("paint-brush"))
)
),
dashboardBody(
tabItems(
# Page 1
tabItem(tabName = "page1",
fluidRow(
box(plotOutput("plot1"), width = 6),
box(plotOutput("plot2"), width = 6)
)
),
# Page 2
tabItem(tabName = "page2",
tabBox(
tabPanel("Tab 1", plotOutput("plot3")),
tabPanel("Tab 2", plotOutput("plot4"))
)
),
# Page 3
tabItem(tabName = "page3",
fluidRow(
radioButtons("radio", "Select Gear:", choices = unique(mtcars$gear)),
plotOutput("plot5")
)
),
# Page 4
tabItem(tabName = "page4",
fluidRow(
selectInput("carb", "Select Carb:", choices = unique(mtcars$carb)),
plotOutput("plot6")
)
),
# Page 5
)
)
)
View(mtcars)
View(mtcars)
install.packages('manipulate')
library(RColorBrewer)
shiny::runApp('C:/Users/kathi/Downloads')
runApp('C:/Users/kathi/Downloads')
runApp('C:/Users/kathi/Downloads')
runApp('C:/Users/kathi/Downloads')
runApp('C:/Users/kathi/Downloads')
runApp('C:/Users/kathi/Downloads')
runApp('C:/Users/kathi/Downloads')
runApp('C:/Users/kathi/Downloads')
runApp('C:/Users/kathi/Downloads')
runApp('C:/Users/kathi/Downloads')
runApp('C:/Users/kathi/Downloads')
runApp('C:/Users/kathi/Downloads')
runApp('C:/Users/kathi/Downloads/DA')
runApp('C:/Users/kathi/Downloads/DA')
runApp('C:/Users/kathi/Downloads/DA')
runApp('C:/Users/kathi/Downloads/DA')
runApp('C:/Users/kathi/Downloads/DA')
runApp('C:/Users/kathi/Downloads/DA')
runApp('C:/Users/kathi/Downloads/DA')
runApp('C:/Users/kathi/Downloads/DA')
runApp('C:/Users/kathi/Downloads/DA')
runApp('C:/Users/kathi/Downloads/DA')
runApp('C:/Users/kathi/Downloads/DV-Spotify/DV-Spotify')
runApp('C:/Users/kathi/Downloads/DA')
runApp('C:/Users/kathi/Downloads/DA')
runApp('C:/Users/kathi/Downloads/DA')
View(mtcars)
runApp('C:/Users/kathi/Downloads/DA')
runApp('C:/Users/kathi/Downloads/DA')
runApp('C:/Users/kathi/Downloads/DA')
View(mtcars)
runApp('C:/Users/kathi/Downloads/DA')
runApp('C:/Users/kathi/Downloads/DA')
shiny::runApp('C:/Users/kathi/Downloads/DV-Spotify/DV-Spotify')
runApp('C:/Users/kathi/Downloads/DV-Spotify/DV-Spotify')
